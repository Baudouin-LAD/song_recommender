{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red199\green200\blue201;\red26\green28\blue31;}
{\*\expandedcolortbl;;\cssrgb\c81961\c82353\c82745;\cssrgb\c13333\c14510\c16078;}
\paperw12240\paperh15840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 for today clustering steps:\
1- load the pandas data frame songs of the audio features (minimum 1000 songs as diverse as possible)) Done\
2-\'a0 standardise the data using standardscaler\
3- save the scaler for future use for the new user input song. save it using pickle\
4- choosing the number of clusters k.\
5- fitting\'a0 k means cluster.\
6- build the elbow graph to find the best k.\
7- use the model with the best k to assign every observation in your data frame to its cluster number ( adding cluster columns to the pandas data frame) using model.predict\
8-save the model with the best k as your final model\'a0 using pickle.\
for the user input tasks and\'a0 the full scenario:\
1- get the song name from the user as an input\
2- play the input song in music embed player.\
3- get the audio features for that song from spotify API. using sp.audio_features(trackid) . pay attention to keep\'a0 only the audio features columns.\
4- load the stabdardscaler using pickle and use it to scale the new song.\
5- using kmeans_model.predict(new scaled audio record for the new song) to predict the cluster (label) for the new song.\
6- return random song from the same cluster\'a0\'a0 that the new song belongs to from your data frame and suggest it to the user.\
7-\'a0 play it using embedded music player. (edited)}